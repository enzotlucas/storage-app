// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Storage.App.MVC.Infrastructure.Database;

#nullable disable

namespace Storage.App.MVC.Infrastructure.Data.Migrations
{
    [DbContext(typeof(SqlServerContext))]
    [Migration("20230422024157_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Storage.App.MVC.Core.ActivityHistory.ActivityHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("ActivityHistory");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Customer.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Enterprise.EnterpriseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Enterprises");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Product.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Sale.SaleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnterpriseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ProductEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Sale.SaleItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItemEntity");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.ActivityHistory.ActivityHistoryEntity", b =>
                {
                    b.HasOne("Storage.App.MVC.Core.Enterprise.EnterpriseEntity", "Enterprise")
                        .WithMany("ActivityHistory")
                        .HasForeignKey("EnterpriseId")
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Customer.CustomerEntity", b =>
                {
                    b.HasOne("Storage.App.MVC.Core.Enterprise.EnterpriseEntity", "Enterprise")
                        .WithMany("Customers")
                        .HasForeignKey("EnterpriseId")
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Product.ProductEntity", b =>
                {
                    b.HasOne("Storage.App.MVC.Core.Enterprise.EnterpriseEntity", "Enterprise")
                        .WithMany("Products")
                        .HasForeignKey("EnterpriseId")
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Sale.SaleEntity", b =>
                {
                    b.HasOne("Storage.App.MVC.Core.Customer.CustomerEntity", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("Storage.App.MVC.Core.Enterprise.EnterpriseEntity", "Enterprise")
                        .WithMany("Sales")
                        .HasForeignKey("EnterpriseId")
                        .IsRequired();

                    b.HasOne("Storage.App.MVC.Core.Product.ProductEntity", null)
                        .WithMany("Sales")
                        .HasForeignKey("ProductEntityId");

                    b.Navigation("Customer");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Sale.SaleItemEntity", b =>
                {
                    b.HasOne("Storage.App.MVC.Core.Product.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("Storage.App.MVC.Core.Sale.SaleEntity", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Customer.CustomerEntity", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Enterprise.EnterpriseEntity", b =>
                {
                    b.Navigation("ActivityHistory");

                    b.Navigation("Customers");

                    b.Navigation("Products");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Product.ProductEntity", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Storage.App.MVC.Core.Sale.SaleEntity", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
